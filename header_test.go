/*
 * Copyright (c) 2019 Alec Randazzo
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

package GoFor_MFT_Parser

import (
	"encoding/hex"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestMasterFileTableRecord_getRecordHeader(t *testing.T) {
	mftBytes, _ := hex.DecodeString

	tests := []struct {
		name                string
		mftRecord           *MasterFileTableRecord
		wantRecordNumber    uint32
		wantAttributeOffset uint16
	}{
		{
			name: "Testing with MFT record 0.",
			mftRecord: &MasterFileTableRecord{
				MftRecordBytes: mftBytes,
			},
			wantRecordNumber:    0,
			wantAttributeOffset: 0x38,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.mftRecord.GetRecordHeader()
			assert.Equal(t, tt.wantRecordNumber, tt.mftRecord.RecordHeader.RecordNumber, "The two record numbers should be equal.")
			assert.Equal(t, tt.wantAttributeOffset, tt.mftRecord.RecordHeader.AttributesOffset, "The two attribute offsets should be equal.")

		})
	}
}

func TestMasterFileTableRecord_getHeaderFlags(t *testing.T) {
	mftBytes, _ := hex.DecodeString

	tests := []struct {
		name              string
		mftRecord         *MasterFileTableRecord
		wantFlagDeleted   bool
		wantFlagDirectory bool
	}{
		{
			name: "Testing with MFT record 0.",
			mftRecord: &MasterFileTableRecord{
				MftRecordBytes: mftBytes,
			},
			wantFlagDeleted:   false,
			wantFlagDirectory: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.mftRecord.getHeaderFlags()
			assert.Equal(t, tt.wantFlagDirectory, tt.mftRecord.RecordHeader.FlagDirectory, "The Directory flags should be equal.")
			assert.Equal(t, tt.wantFlagDeleted, tt.mftRecord.RecordHeader.FlagDeleted, "The deleted flags should be equal.")
		})
	}
}
